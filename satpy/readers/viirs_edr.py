#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2022 Satpy developers
#
# This file is part of satpy.
#
# satpy is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# satpy is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# satpy.  If not, see <http://www.gnu.org/licenses/>.
"""VIIRS NOAA enterprise L2 product reader.

This module defines the :class:`VIIRSJRRFileHandler` file handler, to
be used for reading VIIRS Level 2 products generated by the NOAA enterprise
suite, which are downloadable via NOAA CLASS.
A wide variety of such products exist and, at present, only three are
supported here, showing example filenames:
 - Cloud mask: JRR-CloudMask_v2r3_j01_s202112250807275_e202112250808520_c202112250837300.nc
 - Aerosol properties: JRR-ADP_v2r3_j01_s202112250807275_e202112250808520_c202112250839550.nc
 - Surface reflectance: SurfRefl_v1r1_j01_s202112250807275_e202112250808520_c202112250845080.nc
All products use the same base reader `viirs_l2_jrr` and can be read through satpy with::

    import satpy
    import glob

    filenames = glob.glob('JRR-ADP*.nc')
    scene = satpy.Scene(filenames,
                        reader='viirs_l2_jrr')
    scene.load(['smoke_concentration'])

NOTE:
Multiple products contain datasets with the same name! For example, both the cloud mask
and aerosol files contain a cloud mask, but these are not identical.
For clarity, the aerosol file cloudmask is named `cloud_mask_adp` in this reader.
"""


import logging

import xarray as xr

from satpy.readers.file_handlers import BaseFileHandler
from satpy.utils import get_chunk_size_limit

LOG = logging.getLogger(__name__)


class VIIRSJRRFileHandler(BaseFileHandler):
    """NetCDF4 reader for VIIRS Active Fires."""

    def __init__(self, filename, filename_info, filetype_info):
        """Initialize the geo filehandler."""
        super(VIIRSJRRFileHandler, self).__init__(filename, filename_info,
                                                  filetype_info)
        chunk_size = get_chunk_size_limit() // 4  # 32-bit floats
        self.nc = xr.open_dataset(self.filename,
                                  decode_cf=True,
                                  mask_and_scale=True,
                                  chunks={
                                      'Columns': chunk_size,
                                      'Rows': chunk_size,
                                      'Along_Scan_375m': chunk_size,
                                      'Along_Track_375m': chunk_size,
                                      'Along_Scan_750m': chunk_size,
                                      'Along_Track_750m': chunk_size,
                                  })
        if 'columns' in self.nc.dims:
            self.nc = self.nc.rename({'Columns': 'x', 'Rows': 'y'})
        elif 'Along_Track_375m' in self.nc.dims:
            self.nc = self.nc.rename({'Along_Scan_375m': 'x', 'Along_Track_375m': 'y'})
            self.nc = self.nc.rename({'Along_Scan_750m': 'x', 'Along_Track_750m': 'y'})

        # For some reason, no 'standard_name' is defined in some netCDF files, so
        # here we manually make the definitions.
        if 'Latitude' in self.nc:
            self.nc['Latitude'].attrs.update({'standard_name': 'latitude'})
        if 'Longitude' in self.nc:
            self.nc['Longitude'].attrs.update({'standard_name': 'longitude'})

        self.algorithm_version = filename_info['platform_shortname']
        self.sensor_name = 'viirs'

    def get_dataset(self, dataset_id, info):
        """Get the dataset."""
        ds = self.nc[info['file_key']]
        if ds.attrs.get("units", None) == "unitless":
            ds.attrs["units"] = "1"

        return ds

    @property
    def start_time(self):
        """Get first date/time when observations were recorded."""
        return self.filename_info['start_time']

    @property
    def end_time(self):
        """Get last date/time when observations were recorded."""
        return self.filename_info['end_time']

    @property
    def platform_name(self):
        """Get platform name."""
        platform_path = self.filename_info['platform_shortname']
        platform_dict = {'NPP': 'Suomi-NPP',
                         'JPSS-1': 'NOAA-20',
                         'J01': 'NOAA-20',
                         'JPSS-2': 'NOAA-21',
                         'J02': 'NOAA-21'}
        return platform_dict[platform_path.upper()]
